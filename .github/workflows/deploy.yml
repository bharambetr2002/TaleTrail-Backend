name: Build and Deploy to Render

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: "8.0.x"

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore TaleTrail.API/TaleTrail.API.csproj

      - name: Build application
        run: dotnet build TaleTrail.API/TaleTrail.API.csproj --no-restore --configuration Release

      - name: Run tests (if any)
        run: dotnet test --no-build --configuration Release --verbosity normal || echo "No tests found, skipping..."

  build-and-deploy:
    name: Build Docker Image and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./TaleTrail.API/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/taletrail-api:latest
            ${{ secrets.DOCKER_USERNAME }}/taletrail-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Render
        run: |
          echo "üöÄ Docker image pushed successfully!"
          echo "Image: ${{ secrets.DOCKER_USERNAME }}/taletrail-api:latest"
          echo "Render will automatically pull and deploy the new image."

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, build-and-deploy]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi
